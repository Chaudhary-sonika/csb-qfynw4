{"version":3,"sources":["App.js","index.js"],"names":["emojiDictionary","emojisWeKnow","Object","keys","App","useState","meaning","setMeaning","className","style","padding","onChange","event","userInput","target","value","undefined","map","emoji","onClick","emojiClickHandler","fontSize","cursor","rootElement","document","getElementById","createRoot","render"],"mappings":"iMAGIA,EAAkB,CACpB,eAAM,kBACN,eAAM,mCACN,eAAM,mBACN,eAAM,gBACN,eAAM,2BACN,eAAM,sBACN,eAAM,eACN,eAAM,wBACN,eAAM,2BACN,eAAM,iBACN,eAAM,eAGJC,EAAeC,OAAOC,KAAKH,GAChB,SAASI,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAcA,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIC,MAAO,CAAEC,QAAS,QAAtB,4BACA,uBAAOC,SAhBX,SAA2BC,GACzB,IAAIC,EAAYD,EAAME,OAAOC,MACzBT,EAAUN,EAAgBa,QACdG,IAAZV,IACFA,EAAU,sCAEZC,EAAWD,EACZ,IAUG,mCAAMA,EAAN,OACA,oDACCL,EAAagB,KAAI,SAAUC,GAC1B,OACE,uBACEC,QAAS,kBAdnB,SAA2BD,GAEzBX,EADcP,EAAgBkB,GAE/B,CAWwBE,CAAkBF,EAAxB,EACTT,MAAO,CAAEY,SAAU,OAAQX,QAAS,SAAUY,OAAQ,WAFxD,UAKG,IACAJ,EAAO,MAHHA,EAMV,MAGN,CChDD,IAAMK,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACvB,EAAD,M","file":"static/js/main.e7eabadc.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\n\nvar emojiDictionary = {\n  \"üòÄ\": \"Broadsmile Face\",\n  \"üòÖ\": \"Broadsmile Face with Happy Sweat\",\n  \"üôÉ\": \"Upside-Down Face\",\n  \"üòâ\": \" Winking Face\",\n  \"ü•∞\": \"Smiling Face with Hearts\",\n  \"üòò\": \"Face Blowing a Kiss\",\n  \"‚ò∫Ô∏è\": \"Smiling Face\",\n  \"ü§ó\": \"Feeling of Excitement\",\n  \"üòë\": \"frustration or annoyance\",\n  \"üò∂\": \"Speechlessness\",\n  \"üòî\": \"Feeling Sad\"\n};\n\nvar emojisWeKnow = Object.keys(emojiDictionary);\nexport default function App() {\n  const [meaning, setMeaning] = useState(\"\");\n  function emojiInputHandler(event) {\n    var userInput = event.target.value;\n    var meaning = emojiDictionary[userInput];\n    if (meaning === undefined) {\n      meaning = \"We don't have this in our database\";\n    }\n    setMeaning(meaning);\n  }\n  function emojiClickHandler(emoji) {\n    var meaning = emojiDictionary[emoji];\n    setMeaning(meaning);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 style={{ padding: \"2rem\" }}>Self Helpoutt!</h1>\n      <input onChange={emojiInputHandler} />\n      <h2> {meaning} </h2>\n      <h3> Emojis we know:- </h3>\n      {emojisWeKnow.map(function (emoji) {\n        return (\n          <span\n            onClick={() => emojiClickHandler(emoji)}\n            style={{ fontSize: \"2rem\", padding: \"0.5rem\", cursor: \"pointer\" }}\n            key={emoji}\n          >\n            {\" \"}\n            {emoji}{\" \"}\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}